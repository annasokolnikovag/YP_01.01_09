/** Задание к зачету. Гусятинер Л.Б,, КМПО
Вариант 30. Москва, КМПО РАНХиГС, 2022/2024
30.	В базе данных лесного колледжа содержатся сведения об успеваемости студентов.
Структура входных файлов
Students.txt (ИД_Студента Группа Студент)
1;Г1;Тигра
2;Г2;Винни_Пух
3;Г1;Кролик
…
Session.txt (ИД_Студента Дисциплина Оценки)
1;Физика;3 4 5
2;Пчеловодство;5 5 5
2;Русский язык;3 3
3;Русский язык;5 5 5 4
1;Химия;3 3 5

Сформировать список студентов с любимыми дисциплинами, исходя из среднего
балла (гарантируется, что для каждого студента только одна любимая
дисциплина). Список упорядочить по названию группы и по фамилии студента.
Структура выходного файла out.txt
Г1 Кролик Русский язык
Г1 Тигра Химия
Г2 Винни_Пух Пчеловодство
*/
/** Решение. Гусятинер Л.Б., уровень A */
/** Этап 1. Подготовка файлов. Нормализация. Считывание. Проверка.
Начало решения 23.03.2024, 07:44
Окончание решения 23.03.2024, 08:27
Время 00:41 вместе с подготовкой файлов */
/** Этап 2. Добавлена сортировка.
Начало решения 25.03.2024, 08:41
Окончание решения 25.03.2024, 09:03
Время 00:22 */

#include <stdio.h>
#include <math.h>
#include <locale.h>
#include <string.h>

#define COLLEDGE_SIZE 1000
#define EXAMS_COUNT 5000

typedef struct {
    int st_id;
	char gr[20];
	char fio[20];
} Student;

typedef struct {
    int st_id;
    char subject[20];
    double mark;
} Session;

int main(void) {
    char *locale = setlocale(LC_ALL, "");
	Student v_students[COLLEDGE_SIZE];

	FILE *f_students = fopen("students.txt", "r");
	int n_students = 0;
	Student stud;
	while (fscanf(f_students, "%d;%20[^;];%s", &stud.st_id, stud.gr, stud.fio) == 3) {
        fgetc(f_students);
        v_students[n_students] = stud;
        n_students++;
	}
	fclose(f_students);
	/// Сортировка списка студентов по алфавиту
	for (int i=0; i<n_students-1; i++) {
        int imin = i;
        for (int j=i+1; j<n_students; j++) {
            if (strcmp(v_students[j].gr, v_students[imin].gr) < 0 ||
                strcmp(v_students[j].gr, v_students[imin].gr) == 0 &&
                strcmp(v_students[j].fio, v_students[imin].fio) < 0) { imin = j; }
        }
        if (imin != i) {
            stud = v_students[i];
            v_students[i] = v_students[imin];
            v_students[imin] = stud;
        }
	}

	/// Проверочная печать
	printf("Число студентов %d\n", n_students);
	for (int i = 0; i < n_students; i++) {
        printf("%d %s %s\n", v_students[i].st_id, v_students[i].gr, v_students[i].fio);
	}

	Session v_session[EXAMS_COUNT];

	FILE *f_session = fopen("session.txt", "r");
	int n_session = 0;
	Session ses;
	while (fscanf(f_session, "%d;%20[^;];%lf", &ses.st_id, ses.subject, &ses.mark) == 3) {
        fgetc(f_session);
        v_session[n_session] = ses;
        n_session++;
	}
	fclose(f_session);

	/// Проверочная печать
	printf("Число строк в эл.журе %d\n", n_session);
	for (int i = 0; i < n_session; i++) {
        printf("%d %s %.2f\n", v_session[i].st_id, v_session[i].subject, v_session[i].mark);
	}

    /// Сводная печать
	printf("Сводная печать\n");
	for (int i = 0; i < n_session; i++) {
	    Student stud = {-1, "?", "?"};
	    for (int j = 0; j < n_students; j++) {
	        if (v_session[i].st_id == v_students[j].st_id) {
                stud = v_students[j];
                break;
	        }
	    }
	    printf("%d %s %s %s %.2f\n",
            stud.st_id, stud.fio, stud.gr, v_session[i].subject, v_session[i].mark);
	}

	return 0;
}
